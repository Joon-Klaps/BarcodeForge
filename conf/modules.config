/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
    
    withName: 'MINIMAP2_ALIGN' {
        cpus = { check_max( 5 * task.attempt, 'cpus' ) }
        publishDir = [
            path: { "${params.outdir}/alignment" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'FATOVCF' {
        cpus = { check_max( 5 * task.attempt, 'cpus' ) }
        publishDir = [
            path: { "${params.outdir}/fatovcf" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'MATUTILS_ANNOTATE' {
        cpus = { check_max( 5 * task.attempt, 'cpus' ) }
        ext.args = '--set-overlap 0.8'
        publishDir = [
            path: { "${params.outdir}/matutils_annotate" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'MATUTILS_EXTRACT' {
        cpus = { check_max( 5 * task.attempt, 'cpus' ) }
        publishDir = [
            path: { "${params.outdir}/matutils_extract" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'ADD_REF_MUTS' {
        cpus = { check_max( 5 * task.attempt, 'cpus' ) }
        publishDir = [
            path: { "${params.outdir}/add_ref_muts" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'GENERATE_BARCODES' {
        cpus = { check_max( 5 * task.attempt, 'cpus' ) }
        ext.args = '--set-overlap 1.0'
        publishDir = [
            path: { "${params.outdir}/barcode" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}
